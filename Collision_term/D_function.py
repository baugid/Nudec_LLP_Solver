"""
This file implements some lengthy terms for the collision term. See K. Akita and M. Yamaguchi, arXiv: 2210.10307 for details.
"""
from numba import jit
from numba.core.errors import NumbaDeprecationWarning
import warnings

warnings.simplefilter('ignore', category=NumbaDeprecationWarning)


# Analytic formula in (A.12) in 2210.10307
# The following functions are confirmed by mathematica.

@jit(nopython=True, nogil=True, fastmath=True)
def D_function(i, j, k, l):
    D1 = 0
    D3 = 0
    D2_34 = 0
    D2_12 = 0
    D2_13 = 0
    D2_14 = 0
    D2_23 = 0
    D2_24 = 0

    if (i >= j) and (k >= l):

        if (i + j >= k + l) and (i + l >= j + k) and (i <= j + k + l):

            D1 = 1 / 2 * (j + k + l - i)
            D3 = 1 / 60 * (
                    i ** 5 - 5 * i ** 3 * j ** 2 + 5 * i ** 2 * j ** 3 - j ** 5 - 5 * i ** 3 * k ** 2 + 5 * j ** 3 * k ** 2 + 5 * i ** 2 * k ** 3 + 5 * j ** 2 * k ** 3 - k ** 5 - 5 * i ** 3 * l ** 2 + 5 * j ** 3 * l ** 2 + 5 * k ** 3 * l ** 2 + 5 * i ** 2 * l ** 3 + 5 * j ** 2 * l ** 3 + 5 * k ** 2 * l ** 3 - l ** 5)
            D2_34 = 1 / 12 * ((i - j) ** 3 + 2 * (k ** 3 + l ** 3) - 3 * (i - j) * (k ** 2 + l ** 2))
            D2_12 = 1 / 12 * (-(k + l) ** 3 - 2 * i ** 3 + 2 * j ** 3 + 3 * (k + l) * (i ** 2 + j ** 2))
            D2_13 = 1 / 12 * (-(j + l) ** 3 - 2 * i ** 3 + 2 * k ** 3 + 3 * (j + l) * (i ** 2 + k ** 2))
            D2_14 = 1 / 12 * (-(j + k) ** 3 - 2 * i ** 3 + 2 * l ** 3 + 3 * (j + k) * (i ** 2 + l ** 2))
            D2_23 = 1 / 12 * ((i - l) ** 3 + 2 * (j ** 3 + k ** 3) - 3 * (i - l) * (j ** 2 + k ** 2))
            D2_24 = 1 / 12 * ((i - k) ** 3 + 2 * (j ** 3 + l ** 3) - 3 * (i - k) * (j ** 2 + l ** 2))


        elif (i + j >= k + l) and (i + l < j + k):

            D1 = l
            D3 = 1 / 30 * l ** 3 * (5 * i ** 2 + 5 * j ** 2 + 5 * k ** 2 - l ** 2)
            D2_34 = 1 / 3 * l ** 3
            D2_12 = 1 / 6 * l * (3 * i ** 2 + 3 * j ** 2 - 3 * k ** 2 - l ** 2)
            D2_13 = 1 / 6 * l * (3 * i ** 2 + 3 * k ** 2 - 3 * j ** 2 - l ** 2)
            D2_14 = 1 / 3 * l ** 3
            D2_23 = 1 / 6 * l * (3 * j ** 2 + 3 * k ** 2 - 3 * i ** 2 - l ** 2)
            D2_24 = 1 / 3 * l ** 3


        elif (i + j < k + l) and (i + l < j + k) and (k <= i + j + l):

            D1 = 1 / 2 * (i + j + l - k)
            D3 = 1 / 60 * (
                    k ** 5 - 5 * k ** 3 * l ** 2 + 5 * k ** 2 * l ** 3 - l ** 5 - 5 * k ** 3 * i ** 2 + 5 * l ** 3 * i ** 2 + 5 * k ** 2 * i ** 3 + 5 * l ** 2 * i ** 3 - i ** 5 - 5 * k ** 3 * j ** 2 + 5 * l ** 3 * j ** 2 + 5 * i ** 3 * j ** 2 + 5 * k ** 2 * j ** 3 + 5 * l ** 2 * j ** 3 + 5 * i ** 2 * j ** 3 - j ** 5)
            D2_34 = 1 / 12 * (-(i + j) ** 3 - 2 * k ** 3 + 2 * l ** 3 + 3 * (i + j) * (k ** 2 + l ** 2))
            D2_12 = 1 / 12 * ((k - l) ** 3 + 2 * (i ** 3 + j ** 3) - 3 * (k - l) * (i ** 2 + j ** 2))
            D2_13 = 1 / 12 * (-(l + j) ** 3 - 2 * k ** 3 + 2 * i ** 3 + 3 * (l + j) * (k ** 2 + i ** 2))
            D2_14 = 1 / 12 * ((k - j) ** 3 + 2 * (l ** 3 + i ** 3) - 3 * (k - j) * (l ** 2 + i ** 2))
            D2_23 = 1 / 12 * (-(l + i) ** 3 - 2 * k ** 3 + 2 * j ** 3 + 3 * (l + i) * (k ** 2 + j ** 2))
            D2_24 = 1 / 12 * ((k - i) ** 3 + 2 * (j ** 3 + l ** 3) - 3 * (k - i) * (j ** 2 + l ** 2))


        elif (i + j < k + l) and (i + l >= j + k):

            D1 = j
            D3 = 1 / 30 * j ** 3 * (5 * i ** 2 + 5 * k ** 2 + 5 * l ** 2 - j ** 2)
            D2_34 = 1 / 6 * j * (3 * k ** 2 + 3 * l ** 2 - 3 * i ** 2 - j ** 2)
            D2_12 = 1 / 3 * j ** 3
            D2_13 = 1 / 6 * j * (3 * k ** 2 + 3 * i ** 2 - 3 * l ** 2 - j ** 2)
            D2_14 = 1 / 6 * j * (3 * l ** 2 + 3 * i ** 2 - 3 * k ** 2 - j ** 2)
            D2_23 = 1 / 3 * j ** 3
            D2_24 = 1 / 3 * j ** 3





    elif (i >= j) and (k < l):

        if (i + j >= k + l) and (i + k >= j + l) and (i <= j + k + l):

            D1 = 1 / 2 * (j + k + l - i)
            D3 = 1 / 60 * (
                    i ** 5 - 5 * i ** 3 * j ** 2 + 5 * i ** 2 * j ** 3 - j ** 5 - 5 * i ** 3 * l ** 2 + 5 * j ** 3 * l ** 2 + 5 * i ** 2 * l ** 3 + 5 * j ** 2 * l ** 3 - l ** 5 - 5 * i ** 3 * k ** 2 + 5 * j ** 3 * k ** 2 + 5 * l ** 3 * k ** 2 + 5 * i ** 2 * k ** 3 + 5 * j ** 2 * k ** 3 + 5 * l ** 2 * k ** 3 - k ** 5)
            D2_34 = 1 / 12 * ((i - j) ** 3 + 2 * (k ** 3 + l ** 3) - 3 * (i - j) * (k ** 2 + l ** 2))
            D2_12 = 1 / 12 * (-(k + l) ** 3 - 2 * i ** 3 + 2 * j ** 3 + 3 * (k + l) * (i ** 2 + j ** 2))
            D2_13 = 1 / 12 * (-(j + l) ** 3 - 2 * i ** 3 + 2 * k ** 3 + 3 * (j + l) * (i ** 2 + k ** 2))
            D2_14 = 1 / 12 * (-(j + k) ** 3 - 2 * i ** 3 + 2 * l ** 3 + 3 * (j + k) * (i ** 2 + l ** 2))
            D2_23 = 1 / 12 * ((i - l) ** 3 + 2 * (j ** 3 + k ** 3) - 3 * (i - l) * (j ** 2 + k ** 2))
            D2_24 = 1 / 12 * ((i - k) ** 3 + 2 * (j ** 3 + l ** 3) - 3 * (i - k) * (j ** 2 + l ** 2))


        elif (i + j >= k + l) and (i + k < j + l):

            D1 = k
            D3 = 1 / 30 * k ** 3 * (5 * i ** 2 + 5 * j ** 2 + 5 * l ** 2 - k ** 2)
            D2_34 = 1 / 3 * k ** 3
            D2_12 = 1 / 6 * k * (3 * i ** 2 + 3 * j ** 2 - 3 * l ** 2 - k ** 2)
            D2_13 = 1 / 3 * k ** 3
            D2_14 = 1 / 6 * k * (3 * i ** 2 + 3 * l ** 2 - 3 * j ** 2 - k ** 2)
            D2_23 = 1 / 3 * k ** 3
            D2_24 = 1 / 6 * k * (3 * j ** 2 + 3 * l ** 2 - 3 * i ** 2 - k ** 2)


        elif (i + j < k + l) and (i + k < j + l) and (l <= i + j + k):

            D1 = 1 / 2 * (i + j + k - l)
            D3 = (1 / 60) * (
                    l ** 5 - 5 * l ** 3 * k ** 2 + 5 * l ** 2 * k ** 3 - k ** 5 - 5 * l ** 3 * i ** 2 + 5 * k ** 3 * i ** 2 + 5 * l ** 2 * i ** 3 + 5 * k ** 2 * i ** 3 - i ** 5 - 5 * l ** 3 * j ** 2 + 5 * k ** 3 * j ** 2 + 5 * i ** 3 * j ** 2 + 5 * l ** 2 * j ** 3 + 5 * k ** 2 * j ** 3 + 5 * i ** 2 * j ** 3 - j ** 5)
            D2_34 = (1 / 12) * (-(i + j) ** 3 - 2 * l ** 3 + 2 * k ** 3 + 3 * (i + j) * (l ** 2 + k ** 2))
            D2_12 = (1 / 12) * ((l - k) ** 3 + 2 * (i ** 3 + j ** 3) - 3 * (l - k) * (i ** 2 + j ** 2))
            D2_13 = 1 / 12 * ((l - j) ** 3 + 2 * (k ** 3 + i ** 3) - 3 * (l - j) * (k ** 2 + i ** 2))
            D2_14 = (1 / 12) * (-(j + k) ** 3 - 2 * l ** 3 + 2 * i ** 3 + 3 * (j + k) * (l ** 2 + i ** 2))
            D2_23 = (1 / 12) * ((l - i) ** 3 + 2 * (k ** 3 + j ** 3) - 3 * (l - i) * (k ** 2 + j ** 2))
            D2_24 = (1 / 12) * (-(i + k) ** 3 - 2 * l ** 3 + 2 * j ** 3 + 3 * (i + k) * (l ** 2 + j ** 2))

        elif (i + j < k + l) and (i + k >= j + l):

            D1 = j
            D3 = (1 / 30) * j ** 3 * (5 * i ** 2 + 5 * l ** 2 + 5 * k ** 2 - j ** 2)
            D2_34 = (1 / 6) * j * (3 * l ** 2 + 3 * k ** 2 - 3 * i ** 2 - j ** 2)
            D2_12 = (1 / 3) * j ** 3
            D2_13 = 1 / 6 * j * (3 * i ** 2 + 3 * k ** 2 - 3 * l ** 2 - j ** 2)
            D2_14 = (1 / 6) * j * (3 * i ** 2 + 3 * l ** 2 - 3 * k ** 2 - j ** 2)
            D2_23 = (1 / 3) * j ** 3
            D2_24 = (1 / 3) * j ** 3




    elif (i < j) and (k >= l):

        if (i + j >= k + l) and (j + l >= i + k) and (j <= i + k + l):

            D1 = (1 / 2) * (i + k + l - j)
            D3 = (1 / 60) * (
                    j ** 5 - 5 * j ** 3 * i ** 2 + 5 * j ** 2 * i ** 3 - i ** 5 - 5 * j ** 3 * k ** 2 + 5 * i ** 3 * k ** 2 + 5 * j ** 2 * k ** 3 + 5 * i ** 2 * k ** 3 - k ** 5 - 5 * j ** 3 * l ** 2 + 5 * i ** 3 * l ** 2 + 5 * k ** 3 * l ** 2 + 5 * j ** 2 * l ** 3 + 5 * i ** 2 * l ** 3 + 5 * k ** 2 * l ** 3 - l ** 5)
            D2_34 = (1 / 12) * ((j - i) ** 3 + 2 * (k ** 3 + l ** 3) - 3 * (j - i) * (k ** 2 + l ** 2))
            D2_12 = (1 / 12) * (-(k + l) ** 3 - 2 * j ** 3 + 2 * i ** 3 + 3 * (k + l) * (i ** 2 + j ** 2))
            D2_13 = 1 / 12 * ((j - l) ** 3 + 2 * (i ** 3 + k ** 3) - 3 * (j - l) * (i ** 2 + k ** 2))
            D2_14 = (1 / 12) * ((j - k) ** 3 + 2 * (i ** 3 + l ** 3) - 3 * (j - k) * (i ** 2 + l ** 2))
            D2_23 = (1 / 12) * (-(i + l) ** 3 - 2 * j ** 3 + 2 * k ** 3 + 3 * (i + l) * (j ** 2 + k ** 2))
            D2_24 = 1 / 12 * (-(i + k) ** 3 - 2 * j ** 3 + 2 * l ** 3 + 3 * (i + k) * (j ** 2 + l ** 2))


        elif (i + j >= k + l) and (j + l < i + k):

            D1 = l
            D3 = (1 / 30) * l ** 3 * (5 * i ** 2 + 5 * j ** 2 + 5 * k ** 2 - l ** 2)
            D2_34 = (1 / 3) * l ** 3
            D2_12 = (1 / 6) * l * (3 * i ** 2 + 3 * j ** 2 - 3 * k ** 2 - l ** 2)
            D2_13 = 1 / 6 * l * (3 * i ** 2 + 3 * k ** 2 - 3 * j ** 2 - l ** 2)
            D2_14 = (1 / 3) * l ** 3
            D2_23 = (1 / 6) * l * (3 * j ** 2 + 3 * k ** 2 - 3 * i ** 2 - l ** 2)
            D2_24 = 1 / 3 * l ** 3


        elif (i + j < k + l) and (j + l < i + k) and (k <= i + j + l):

            D1 = (1 / 2) * (i + j + l - k)
            D3 = (1 / 60) * (
                    k ** 5 - 5 * k ** 3 * l ** 2 + 5 * k ** 2 * l ** 3 - l ** 5 - 5 * k ** 3 * j ** 2 + 5 * l ** 3 * j ** 2 + 5 * k ** 2 * j ** 3 + 5 * l ** 2 * j ** 3 - j ** 5 - 5 * k ** 3 * i ** 2 + 5 * l ** 3 * i ** 2 + 5 * j ** 3 * i ** 2 + 5 * k ** 2 * i ** 3 + 5 * l ** 2 * i ** 3 + 5 * j ** 2 * i ** 3 - i ** 5)
            D2_34 = (1 / 12) * (-(i + j) ** 3 - 2 * k ** 3 + 2 * l ** 3 + 3 * (i + j) * (k ** 2 + l ** 2))
            D2_12 = (1 / 12) * ((k - l) ** 3 + 2 * (i ** 3 + j ** 3) - 3 * (k - l) * (i ** 2 + j ** 2))
            D2_13 = (1 / 12) * (-(l + j) ** 3 - 2 * k ** 3 + 2 * i ** 3 + 3 * (l + j) * (k ** 2 + i ** 2))
            D2_14 = (1 / 12) * ((k - j) ** 3 + 2 * (i ** 3 + l ** 3) - 3 * (k - j) * (i ** 2 + l ** 2))
            D2_23 = (1 / 12) * (-(l + i) ** 3 - 2 * k ** 3 + 2 * j ** 3 + 3 * (l + i) * (k ** 2 + j ** 2))
            D2_24 = (1 / 12) * ((k - i) ** 3 + 2 * (j ** 3 + l ** 3) - 3 * (k - i) * (j ** 2 + l ** 2))

        elif (i + j < k + l) and (j + l >= i + k):

            D1 = i
            D3 = (1 / 30) * i ** 3 * (5 * j ** 2 + 5 * k ** 2 + 5 * l ** 2 - i ** 2)
            D2_34 = (1 / 6) * i * (3 * k ** 2 + 3 * l ** 2 - 3 * j ** 2 - i ** 2)
            D2_12 = (1 / 3) * i ** 3
            D2_13 = (1 / 3) * i ** 3
            D2_14 = (1 / 3) * i ** 3
            D2_23 = (1 / 6) * i * (3 * j ** 2 + 3 * k ** 2 - 3 * l ** 2 - i ** 2)
            D2_24 = (1 / 6) * i * (3 * j ** 2 + 3 * l ** 2 - 3 * k ** 2 - i ** 2)




    else:

        if (i + j >= k + l) and (j + k >= i + l) and (j <= i + k + l):

            D1 = (1 / 2) * (i + k + l - j)
            D3 = (1 / 60) * (
                    j ** 5 - 5 * j ** 3 * i ** 2 + 5 * j ** 2 * i ** 3 - i ** 5 - 5 * j ** 3 * l ** 2 + 5 * i ** 3 * l ** 2 + 5 * j ** 2 * l ** 3 + 5 * i ** 2 * l ** 3 - l ** 5 - 5 * j ** 3 * k ** 2 + 5 * i ** 3 * k ** 2 + 5 * l ** 3 * k ** 2 + 5 * j ** 2 * k ** 3 + 5 * i ** 2 * k ** 3 + 5 * l ** 2 * k ** 3 - k ** 5)
            D2_34 = (1 / 12) * ((j - i) ** 3 + 2 * (k ** 3 + l ** 3) - 3 * (j - i) * (k ** 2 + l ** 2))
            D2_12 = (1 / 12) * (-(k + l) ** 3 - 2 * j ** 3 + 2 * i ** 3 + 3 * (k + l) * (i ** 2 + j ** 2))
            D2_13 = 1 / 12 * ((j - l) ** 3 + 2 * (i ** 3 + k ** 3) - 3 * (j - l) * (i ** 2 + k ** 2))
            D2_14 = (1 / 12) * ((j - k) ** 3 + 2 * (i ** 3 + l ** 3) - 3 * (j - k) * (i ** 2 + l ** 2))
            D2_23 = (1 / 12) * (-(i + l) ** 3 - 2 * j ** 3 + 2 * k ** 3 + 3 * (i + l) * (j ** 2 + k ** 2))
            D2_24 = 1 / 12 * (-(i + k) ** 3 - 2 * j ** 3 + 2 * l ** 3 + 3 * (i + k) * (j ** 2 + l ** 2))

        elif (i + j >= k + l) and (j + k < i + l):

            D1 = k
            D3 = (1 / 30) * k ** 3 * (5 * i ** 2 + 5 * j ** 2 + 5 * l ** 2 - k ** 2)
            D2_34 = (1 / 3) * k ** 3
            D2_12 = (1 / 6) * k * (3 * j ** 2 + 3 * i ** 2 - 3 * l ** 2 - k ** 2)
            D2_13 = 1 / 3 * k ** 3
            D2_14 = (1 / 6) * k * (3 * i ** 2 + 3 * l ** 2 - 3 * j ** 2 - k ** 2)
            D2_23 = (1 / 3) * k ** 3
            D2_24 = 1 / 6 * k * (3 * j ** 2 + 3 * l ** 2 - 3 * i ** 2 - k ** 2)

        elif (i + j < k + l) and (j + k < i + l) and (l <= i + j + k):

            D1 = (1 / 2) * (i + j + k - l)
            D3 = (1 / 60) * (
                    l ** 5 - 5 * l ** 3 * k ** 2 + 5 * l ** 2 * k ** 3 - k ** 5 - 5 * l ** 3 * j ** 2 + 5 * k ** 3 * j ** 2 + 5 * l ** 2 * j ** 3 + 5 * k ** 2 * j ** 3 - j ** 5 - 5 * l ** 3 * i ** 2 + 5 * k ** 3 * i ** 2 + 5 * j ** 3 * i ** 2 + 5 * l ** 2 * i ** 3 + 5 * k ** 2 * i ** 3 + 5 * j ** 2 * i ** 3 - i ** 5)
            D2_34 = (1 / 12) * (-(i + j) ** 3 - 2 * l ** 3 + 2 * k ** 3 + 3 * (i + j) * (k ** 2 + l ** 2))
            D2_12 = (1 / 12) * ((l - k) ** 3 + 2 * (i ** 3 + j ** 3) - 3 * (l - k) * (i ** 2 + j ** 2))
            D2_13 = 1 / 12 * ((l - j) ** 3 + 2 * (k ** 3 + i ** 3) - 3 * (l - j) * (k ** 2 + i ** 2))
            D2_14 = (1 / 12) * (-(k + j) ** 3 - 2 * l ** 3 + 2 * i ** 3 + 3 * (k + j) * (l ** 2 + i ** 2))
            D2_23 = (1 / 12) * ((l - i) ** 3 + 2 * (k ** 3 + j ** 3) - 3 * (l - i) * (k ** 2 + j ** 2))
            D2_24 = (1 / 12) * (-(k + i) ** 3 - 2 * l ** 3 + 2 * j ** 3 + 3 * (k + i) * (l ** 2 + j ** 2))

        elif (i + j < k + l) and (j + k >= i + l):

            D1 = i
            D3 = (1 / 30) * i ** 3 * (5 * j ** 2 + 5 * k ** 2 + 5 * l ** 2 - i ** 2)
            D2_34 = (1 / 6) * i * (3 * k ** 2 + 3 * l ** 2 - 3 * j ** 2 - i ** 2)
            D2_12 = (1 / 3) * i ** 3
            D2_13 = (1 / 3) * i ** 3
            D2_14 = (1 / 3) * i ** 3
            D2_23 = (1 / 6) * i * (3 * k ** 2 + 3 * j ** 2 - 3 * l ** 2 - i ** 2)
            D2_24 = (1 / 6) * i * (3 * l ** 2 + 3 * j ** 2 - 3 * k ** 2 - i ** 2)

    return D1, D2_34, D2_12, D2_13, D2_14, D2_23, D2_24, D3
